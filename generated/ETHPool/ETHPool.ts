// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ETHPool extends ethereum.SmartContract {
  static bind(address: Address): ETHPool {
    return new ETHPool("ETHPool", address);
  }

  depositBalances(param0: Address): BigInt {
    let result = super.call(
      "depositBalances",
      "depositBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_depositBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositBalances",
      "depositBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTeam(param0: Address): boolean {
    let result = super.call("isTeam", "isTeam(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isTeam(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTeam", "isTeam(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minimumBalance(): BigInt {
    let result = super.call("minimumBalance", "minimumBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minimumBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumBalance",
      "minimumBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositBalance(): BigInt {
    let result = super.call(
      "totalDepositBalance",
      "totalDepositBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositBalance",
      "totalDepositBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  users(param0: BigInt): Address {
    let result = super.call("users", "users(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_users(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("users", "users(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTeamMemberCall extends ethereum.Call {
  get inputs(): AddTeamMemberCall__Inputs {
    return new AddTeamMemberCall__Inputs(this);
  }

  get outputs(): AddTeamMemberCall__Outputs {
    return new AddTeamMemberCall__Outputs(this);
  }
}

export class AddTeamMemberCall__Inputs {
  _call: AddTeamMemberCall;

  constructor(call: AddTeamMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTeamMemberCall__Outputs {
  _call: AddTeamMemberCall;

  constructor(call: AddTeamMemberCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositAndDestriputeRewardsCall extends ethereum.Call {
  get inputs(): DepositAndDestriputeRewardsCall__Inputs {
    return new DepositAndDestriputeRewardsCall__Inputs(this);
  }

  get outputs(): DepositAndDestriputeRewardsCall__Outputs {
    return new DepositAndDestriputeRewardsCall__Outputs(this);
  }
}

export class DepositAndDestriputeRewardsCall__Inputs {
  _call: DepositAndDestriputeRewardsCall;

  constructor(call: DepositAndDestriputeRewardsCall) {
    this._call = call;
  }
}

export class DepositAndDestriputeRewardsCall__Outputs {
  _call: DepositAndDestriputeRewardsCall;

  constructor(call: DepositAndDestriputeRewardsCall) {
    this._call = call;
  }
}

export class RemoveTeamMemberCall extends ethereum.Call {
  get inputs(): RemoveTeamMemberCall__Inputs {
    return new RemoveTeamMemberCall__Inputs(this);
  }

  get outputs(): RemoveTeamMemberCall__Outputs {
    return new RemoveTeamMemberCall__Outputs(this);
  }
}

export class RemoveTeamMemberCall__Inputs {
  _call: RemoveTeamMemberCall;

  constructor(call: RemoveTeamMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveTeamMemberCall__Outputs {
  _call: RemoveTeamMemberCall;

  constructor(call: RemoveTeamMemberCall) {
    this._call = call;
  }
}

export class SetMinBalanceCall extends ethereum.Call {
  get inputs(): SetMinBalanceCall__Inputs {
    return new SetMinBalanceCall__Inputs(this);
  }

  get outputs(): SetMinBalanceCall__Outputs {
    return new SetMinBalanceCall__Outputs(this);
  }
}

export class SetMinBalanceCall__Inputs {
  _call: SetMinBalanceCall;

  constructor(call: SetMinBalanceCall) {
    this._call = call;
  }

  get _minimumBalance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinBalanceCall__Outputs {
  _call: SetMinBalanceCall;

  constructor(call: SetMinBalanceCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
